#version 460 core

layout(location=0) uniform mat4 MVP;
layout(location=1) uniform mat4 M;
layout(location=3) uniform samplerCube cubeMap;

layout (location=6) uniform float radius;

layout (triangles, equal_spacing, ccw) in;

patch in vec4 tescontrol_color;
in vec4 tescontrol_pos[];
in vec4 tescontrol_norm[];
patch in int tescontrol_TextType;
in vec4 tescontrol_cubeTexCoord[];

out vec4 fcolor;
out vec4 fpos;
out vec4 fnorm;
out flat int fTextType;
out vec4 fcubeTexCoord;



void main() {    

   // barycentric coordinates
    float u = gl_TessCoord.x;
    float v = gl_TessCoord.y;
    float w = gl_TessCoord.z;

    // barycentric interpolation
    vec4 texCoord = u * tescontrol_cubeTexCoord[0] + v * tescontrol_cubeTexCoord[1] + w * tescontrol_cubeTexCoord[2];

    vec4 pos0 = gl_in[0].gl_Position;
    vec4 pos1 = gl_in[1].gl_Position;
    vec4 pos2 = gl_in[2].gl_Position;
    
    // barycentric interpolation    
    vec4 pos = u * pos0 + v * pos1 + w * pos2;

    vec4 localPos = inverse(MVP) * pos;

    vec3 dir = normalize(localPos.xyz);  
    
    vec4 spherePos = vec4(dir,1.0);
    
    spherePos * 10;

    vec4 test = texture(cubeMap,spherePos.xyz);

    float maxHeight = 1.1;
    float minHeight = 0.9;

    float oldRange = (1 - 0);
    float newRange = (maxHeight - minHeight);
    float newValue = (((test.x - 0) * newRange) / oldRange) + minHeight;

    spherePos.x *= newValue;
    spherePos.y *= newValue;
    spherePos.z *= newValue;

    gl_Position = MVP * spherePos;
	
	fcolor = tescontrol_color;
	fpos = spherePos;
	fnorm = tescontrol_norm[gl_PrimitiveID];
	fTextType = tescontrol_TextType;
	fcubeTexCoord = spherePos;


	}


    